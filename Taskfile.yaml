---
version: "3"

vars:
  PROJECT_NAME:
    sh: echo ${PWD##*/}
  REPOSITORY_NAME: stuttgart-things
  MODULE: github.com/{{ .REPOSITORY_NAME }}/{{ .PROJECT_NAME }}
  REGISTRY: eu.gcr.io
  GIT_COMMIT:
    sh: git log -n 1 --format=%h
  VERSION:
    sh: git describe --tags --abbrev=0
  DATE:
    sh: date +"%Y.%m%d.%H%M"
  UPDATED_TAG:
    sh: old_tag=$(git describe --tags --abbrev=0 | cut -d "." -f3); new_tag=$((old_tag+1)); echo $new_tag
  UPDATED_TAG_VERSION:
    sh: t1=$(git describe --tags --abbrev=0 | cut -f1 -d'.'); t2=$(git describe --tags --abbrev=0 | cut -f2 -d'.'); echo $t1.$t2.{{.UPDATED_TAG}}
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo $(git rev-parse --abbrev-ref HEAD) ; fi
  COBRA_VERSION: 1.3.0

tasks:
  run:
    desc: Run
    deps: [install]
    cmds:
      - "{{ .PROJECT_NAME }}"

  install-cobra:
    cmds:
      - "go install github.com/spf13/cobra-cli@v{{ .COBRA_VERSION }}"

  install:
    desc: Install
    deps: [lint, test]
    cmds:
      - go install -ldflags="-X {{ .MODULE }}/cmd.version=v{{ .UPDATED_TAG_VERSION }} -X {{ .MODULE }}/cmd.date={{ .DATE }} -X {{ .MODULE }}/cmd.commit={{ .GIT_COMMIT }}"
      - "{{ .PROJECT_NAME }}"

  build-image:
    desc: Build container image
    deps: [install]
    cmds:
      - sudo nerdctl build -t {{ .REGISTRY }}/{{ .REPOSITORY_NAME }}/{{ lower (.PROJECT_NAME) }}:{{ .UPDATED_TAG_VERSION }} --build-arg VERSION={{ .UPDATED_TAG_VERSION }} --build-arg BUILD_DATE={{ .DATE }} --build-arg COMMIT={{ .GIT_COMMIT }} .
      - sudo nerdctl push {{ .REGISTRY }}/{{ .REPOSITORY_NAME }}/{{ lower (.PROJECT_NAME) }}:{{ .UPDATED_TAG_VERSION }}

  add-cmd:
    deps: [install-cobra]
    cmds:
      - |
        echo "Enter to be created cli cmd name:"
        read CLI_CMD_NAME;
        cobra-cli add ${CLI_CMD_NAME}

  lint:
    desc: Lint
    cmds:
      - cmd: golangci-lint run
        ignore_error: true

  test:
    desc: Test
    cmds:
      - go mod tidy
      - go test -v

  git-push:
    desc: Commit & push the module
    cmds:
      - go mod tidy
      - git pull
      - git config advice.addIgnoredFile false
      - git add *
      - git commit -am 'updated {{ .PROJECT_NAME }} {{ .DATE }} for tag version {{ .UPDATED_TAG_VERSION }}{{ .BRANCH }}'
      - git push origin -u {{ .BRANCH }}

  tag:
    desc: Commit, push & tag the module
    deps: [lint, test]
    cmds:
      - rm -rf dist
      - task: git-push
      - go mod tidy
      - git pull --tags
      - git tag -a {{ .UPDATED_TAG_VERSION }}{{ .BRANCH }} -m 'updated for stuttgart-things {{ .DATE }} for tag version {{ .UPDATED_TAG_VERSION }}-{{ .BRANCH }}'
      - git push origin --tags

  release:
    desc: Relase binaries
    deps: [tag]
    cmds:
      - unset GITLAB_TOKEN
      - goreleaser healthcheck
      - goreleaser check
      - goreleaser release --skip-publish --snapshot --clean
      - goreleaser release --clean
      - rm -rf ./dist

  branch:
    desc: Create branch from main
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be created (remote) branch:"
        read BRANCH_NAME;
        git checkout -b ${BRANCH_NAME}
        git push origin ${BRANCH_NAME}

  pull-request:
    desc: Create pull request into main
    cmds:
      - task: git-push
      - gh pr create -t "pr" -b "created pr for ${BRANCH_NAME} branch into main"

  delete-branch:
    desc: Delete branch from origin
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be deleted (remote) branch:"
        read BRANCH_NAME;
        git branch -d ${BRANCH_NAME}
        git push origin -d ${BRANCH_NAME}
